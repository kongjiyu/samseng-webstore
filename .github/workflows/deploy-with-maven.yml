#name: Build with Maven and Deploy to Cloud
#
#on:
#    push:
#        branches: [ "master" ]
#
#jobs:
#    build-and-deploy:
#        runs-on: ubuntu-latest
#        environment: github-deploy
#
#        steps:
#            -   uses: actions/checkout@v4
#
#            -   name: Setup Node
#                uses: actions/setup-node@v4
#                with:
#                    node-version: 22
#
#            -   name: Sync node dependencies
#                run: npm ci
#
#            -   name: Run npm build script
#                run: npm run build
#
#            -   name: Set up JDK 17
#                uses: actions/setup-java@v4
#                with:
#                    java-version: '17'
#                    distribution: 'temurin'
#                    cache: maven
#
#            -   name: Build with Maven
#                run: mvn -B package --file pom.xml
#
#            # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
##            -   name: Update dependency graph
##                uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
#
#            -   name: Setup SSH
#                uses: webfactory/ssh-agent@v0.7.0
#                with:
#                    ssh-private-key: ${{ secrets.HOST_SSH_KEY }}
#
#            -   name: Deploy WAR file
#                env:
#                    USER: ubuntu
#                    HOST: 140.245.115.94
#                    DIR: /home/ubuntu/samseng-webstore
#                run: |
#                    scp -o StrictHostKeyChecking=no -r .env docker-compose.prod.yml ./target/*.war ./deploy Caddyfile $USER@$HOST:$DIR
#
#                    # make sure services are up
#                    ssh -o StrictHostKeyChecking=no $USER@$HOST docker-compose -f $DIR/docker-compose.prod.yml -p samseng-webstore up -d --wait
#
#                    # deploy newest war
#                    ssh -o StrictHostKeyChecking=no $USER@$HOST docker cp $DIR/ROOT.war samseng-web:/opt/glassfish7/glassfish/domains/domain1/autodeploy
